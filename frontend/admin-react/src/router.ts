/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as LoginIndexRouteImport } from './routes/login/index'
import { Route as AdminIndexRouteImport } from './routes/admin/index'
import { Route as AdminUsersIndexRouteImport } from './routes/admin/users/index'
import { Route as AdminSystemIndexRouteImport } from './routes/admin/system/index'
import { Route as AdminContentIndexRouteImport } from './routes/admin/content/index'
import { Route as AdminAnalyticsIndexRouteImport } from './routes/admin/analytics/index'

const LoginIndexRoute = LoginIndexRouteImport.update({
  id: '/login/',
  path: '/login/',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminIndexRoute = AdminIndexRouteImport.update({
  id: '/admin/',
  path: '/admin/',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminUsersIndexRoute = AdminUsersIndexRouteImport.update({
  id: '/admin/users/',
  path: '/admin/users/',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminSystemIndexRoute = AdminSystemIndexRouteImport.update({
  id: '/admin/system/',
  path: '/admin/system/',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminContentIndexRoute = AdminContentIndexRouteImport.update({
  id: '/admin/content/',
  path: '/admin/content/',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminAnalyticsIndexRoute = AdminAnalyticsIndexRouteImport.update({
  id: '/admin/analytics/',
  path: '/admin/analytics/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/admin': typeof AdminIndexRoute
  '/login': typeof LoginIndexRoute
  '/admin/analytics': typeof AdminAnalyticsIndexRoute
  '/admin/content': typeof AdminContentIndexRoute
  '/admin/system': typeof AdminSystemIndexRoute
  '/admin/users': typeof AdminUsersIndexRoute
}
export interface FileRoutesByTo {
  '/admin': typeof AdminIndexRoute
  '/login': typeof LoginIndexRoute
  '/admin/analytics': typeof AdminAnalyticsIndexRoute
  '/admin/content': typeof AdminContentIndexRoute
  '/admin/system': typeof AdminSystemIndexRoute
  '/admin/users': typeof AdminUsersIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/admin/': typeof AdminIndexRoute
  '/login/': typeof LoginIndexRoute
  '/admin/analytics/': typeof AdminAnalyticsIndexRoute
  '/admin/content/': typeof AdminContentIndexRoute
  '/admin/system/': typeof AdminSystemIndexRoute
  '/admin/users/': typeof AdminUsersIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/admin'
    | '/login'
    | '/admin/analytics'
    | '/admin/content'
    | '/admin/system'
    | '/admin/users'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/admin'
    | '/login'
    | '/admin/analytics'
    | '/admin/content'
    | '/admin/system'
    | '/admin/users'
  id:
    | '__root__'
    | '/admin/'
    | '/login/'
    | '/admin/analytics/'
    | '/admin/content/'
    | '/admin/system/'
    | '/admin/users/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  AdminIndexRoute: typeof AdminIndexRoute
  LoginIndexRoute: typeof LoginIndexRoute
  AdminAnalyticsIndexRoute: typeof AdminAnalyticsIndexRoute
  AdminContentIndexRoute: typeof AdminContentIndexRoute
  AdminSystemIndexRoute: typeof AdminSystemIndexRoute
  AdminUsersIndexRoute: typeof AdminUsersIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/login/': {
      id: '/login/'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/': {
      id: '/admin/'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/users/': {
      id: '/admin/users/'
      path: '/admin/users'
      fullPath: '/admin/users'
      preLoaderRoute: typeof AdminUsersIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/system/': {
      id: '/admin/system/'
      path: '/admin/system'
      fullPath: '/admin/system'
      preLoaderRoute: typeof AdminSystemIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/content/': {
      id: '/admin/content/'
      path: '/admin/content'
      fullPath: '/admin/content'
      preLoaderRoute: typeof AdminContentIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/analytics/': {
      id: '/admin/analytics/'
      path: '/admin/analytics'
      fullPath: '/admin/analytics'
      preLoaderRoute: typeof AdminAnalyticsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  AdminIndexRoute: AdminIndexRoute,
  LoginIndexRoute: LoginIndexRoute,
  AdminAnalyticsIndexRoute: AdminAnalyticsIndexRoute,
  AdminContentIndexRoute: AdminContentIndexRoute,
  AdminSystemIndexRoute: AdminSystemIndexRoute,
  AdminUsersIndexRoute: AdminUsersIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
