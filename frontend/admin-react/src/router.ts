/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as UsersIndexRouteImport } from './routes/users/index'
import { Route as SystemIndexRouteImport } from './routes/system/index'
import { Route as LoginIndexRouteImport } from './routes/login/index'
import { Route as IndexIndexRouteImport } from './routes/index/index'
import { Route as ContentIndexRouteImport } from './routes/content/index'
import { Route as AnalyticsIndexRouteImport } from './routes/analytics/index'

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const UsersIndexRoute = UsersIndexRouteImport.update({
  id: '/users/',
  path: '/users/',
  getParentRoute: () => rootRouteImport,
} as any)
const SystemIndexRoute = SystemIndexRouteImport.update({
  id: '/system/',
  path: '/system/',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginIndexRoute = LoginIndexRouteImport.update({
  id: '/login/',
  path: '/login/',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexIndexRoute = IndexIndexRouteImport.update({
  id: '/index/',
  path: '/index/',
  getParentRoute: () => rootRouteImport,
} as any)
const ContentIndexRoute = ContentIndexRouteImport.update({
  id: '/content/',
  path: '/content/',
  getParentRoute: () => rootRouteImport,
} as any)
const AnalyticsIndexRoute = AnalyticsIndexRouteImport.update({
  id: '/analytics/',
  path: '/analytics/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/analytics': typeof AnalyticsIndexRoute
  '/content': typeof ContentIndexRoute
  '/index': typeof IndexIndexRoute
  '/login': typeof LoginIndexRoute
  '/system': typeof SystemIndexRoute
  '/users': typeof UsersIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/analytics': typeof AnalyticsIndexRoute
  '/content': typeof ContentIndexRoute
  '/index': typeof IndexIndexRoute
  '/login': typeof LoginIndexRoute
  '/system': typeof SystemIndexRoute
  '/users': typeof UsersIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/analytics/': typeof AnalyticsIndexRoute
  '/content/': typeof ContentIndexRoute
  '/index/': typeof IndexIndexRoute
  '/login/': typeof LoginIndexRoute
  '/system/': typeof SystemIndexRoute
  '/users/': typeof UsersIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/analytics'
    | '/content'
    | '/index'
    | '/login'
    | '/system'
    | '/users'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/analytics'
    | '/content'
    | '/index'
    | '/login'
    | '/system'
    | '/users'
  id:
    | '__root__'
    | '/'
    | '/analytics/'
    | '/content/'
    | '/index/'
    | '/login/'
    | '/system/'
    | '/users/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AnalyticsIndexRoute: typeof AnalyticsIndexRoute
  ContentIndexRoute: typeof ContentIndexRoute
  IndexIndexRoute: typeof IndexIndexRoute
  LoginIndexRoute: typeof LoginIndexRoute
  SystemIndexRoute: typeof SystemIndexRoute
  UsersIndexRoute: typeof UsersIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/users/': {
      id: '/users/'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof UsersIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/system/': {
      id: '/system/'
      path: '/system'
      fullPath: '/system'
      preLoaderRoute: typeof SystemIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login/': {
      id: '/login/'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/index/': {
      id: '/index/'
      path: '/index'
      fullPath: '/index'
      preLoaderRoute: typeof IndexIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/content/': {
      id: '/content/'
      path: '/content'
      fullPath: '/content'
      preLoaderRoute: typeof ContentIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/analytics/': {
      id: '/analytics/'
      path: '/analytics'
      fullPath: '/analytics'
      preLoaderRoute: typeof AnalyticsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AnalyticsIndexRoute: AnalyticsIndexRoute,
  ContentIndexRoute: ContentIndexRoute,
  IndexIndexRoute: IndexIndexRoute,
  LoginIndexRoute: LoginIndexRoute,
  SystemIndexRoute: SystemIndexRoute,
  UsersIndexRoute: UsersIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
